<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABenQAT3x1AHd8dQB3fHUAd3x1
        AHd8dQB3fHUAd3x1AHd8dQB3fHUAd3x1AHd8dQB3fHUAd3x1AHd8dQB3fHUAd3x1AHd8dQB3fHUAd3x1
        AE4AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHx1AIt8dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3t0AIoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe3QA2nx1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/e3QA2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB8dQDgfHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHx1AOB8dQD/fHUA/3t0APl9dQBmfXUAZnx1ALB7dADhfXUAZn11AGZ7dQDIe3UAyH11
        AGZ9dQBme3QA4Xx1ALB9dQBmfXUAZnt0APl8dQD/fHUA/3x1AOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAfHUA4Hx1AP98dQD/e3QA9QAAAAAAAAAAfHQAe3t1AMwAAAAAAAAAAHt1
        AKN7dQCjAAAAAAAAAAB7dQDMfHQAewAAAAAAAAAAe3QA9Xx1AP98dQD/fHUA4AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8dQDgfHUA/3x1AP98dQD2eHgAEXh4ABF8dACDe3QA0Hh4
        ABF4eAARe3UAqXt1AKl4eAAReHgAEXt0ANB8dACDeHgAEXh4ABF8dQD2fHUA/3x1AP98dQDgAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHx1AOB8dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHUA4Hx1AP98dQD/fHUA+Ht0
        AER7dABEfHQAnnt0ANp7dABEe3QARHt0ALx7dAC8e3QARHt0AER7dADafHQAnnt0AER7dABEfHUA+Hx1
        AP98dQD/fHUA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8dQDgfHUA/3x1
        AP97dAD1AAAAAAAAAAB8dAB7e3UAzAAAAAAAAAAAe3UAo3t1AKMAAAAAAAAAAHt1AMx8dAB7AAAAAAAA
        AAB7dAD1fHUA/3x1AP98dQDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHx1
        AOB8dQD/fHUA/3t0APd9cwAzfXMAM3t0AJV7dADWfXMAM31zADN7dQC2e3UAtn1zADN9cwAze3QA1nt0
        AJV9cwAzfXMAM3t0APd8dQD/fHUA/3x1AOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAfHUA4Hx1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB8dQDgfHUA/3x1AP98dQD2eHgAEXh4ABF8dACDe3QA0Hh4ABF4eAARe3UAqXt1
        AKl4eAAReHgAEXt0ANB8dACDeHgAEXh4ABF8dQD2fHUA/3x1AP98dQDgAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHx1AOB8dQD/fHUA/3t0APUAAAAAAAAAAHx0AHt7dQDMAAAAAAAA
        AAB7dQCje3UAowAAAAAAAAAAe3UAzHx0AHsAAAAAAAAAAHt0APV8dQD/fHUA/3x1AOAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHUA4Hx1AP98dQD/fHUA+Ht1AFV7dQBVe3UAp3t0
        AN17dQBVe3UAVXt0AMJ7dADCe3UAVXt1AFV7dADde3UAp3t1AFV7dQBVfHUA+Hx1AP98dQD/fHUA4AAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8dQDgfHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHx1AOB8dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHUA4Hx1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB8dQDgfHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHx1AOB8dQD/fHUA/3x1APZ/eAAif3gAIn94ACJ/eAAif3gAIn94ACJ/eAAif3gAIn94
        ACJ/eAAif3gAIn94ACJ/eAAif3gAInx1APZ8dQD/fHUA/3x1AOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAfHUA4Hx1AP98dQD/e3QA9QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe3QA9Xx1AP98dQD/fHUA4AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8dQDgfHUA/3x1AP97dAD1AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAfHUAmHx1AJh4eAATfHQA7nx3AC97dQB8e3QAtQAAAAB7dAD1fHUA/3x1AP98dQDgAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHx1AOB8dQD/fHUA/3t0APUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB6dgA2enYANm1tAAd7dQBVeHgAEXlzACx9dQBBAAAAAHt0APV8dQD/fHUA/3x1
        AOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHUA4Hx1AP98dQD/e3QA9QAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe3QA9Xx1
        AP98dQD/fHUA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8dQDgfHUA/3x1
        AP98dQD8fHUAu3x1ALt8dQC7fHUAu3x1ALt8dQC7fHUAu3x1ALt8dQC7fHUAu3x1ALt8dQC7fHUAu3x1
        ALt8dQD8fHUA/3x1AP98dQDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHt0
        ANp8dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3t0ANoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAfHUAjXx1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1
        AP98dQD/fHUA/3x1AP98dQD/fHUA/3x1AP98dQD/fHUAiwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB/fwACfHUAUHx1AHd8dQB3fHUAd3x1AHd8dQB3fHUAd3x1AHd8dQB3fHUAd3x1
        AHd8dQB3fHUAd3x1AHd8dQB3fHUAd3x1AHd8dQB3fHUAd3p0AE8AAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////4AAAf+AAAH/gAAB/4AAAf+AAAH/hmZh/4AAAf+AAAH/gA
        AB/4ZmYf+AAAH/gAAB/4AAAf+GZmH/gAAB/4AAAf+AAAH/gAAB/4AAAf+AAAH/h//h/4fgIf+H4CH/h/
        /h/4AAAf+AAAH/gAAB/4AAAf//////////8=
</value>
  </data>
</root>